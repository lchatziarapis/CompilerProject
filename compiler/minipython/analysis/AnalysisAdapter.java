/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import java.util.*;
import minipython.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAGoal(AGoal node)
    {
        defaultCase(node);
    }

    public void caseAPro1Program(APro1Program node)
    {
        defaultCase(node);
    }

    public void caseAPro2Program(APro2Program node)
    {
        defaultCase(node);
    }

    public void caseAFuncFunction(AFuncFunction node)
    {
        defaultCase(node);
    }

    public void caseAArgArgument(AArgArgument node)
    {
        defaultCase(node);
    }

    public void caseAArg2Argument2(AArg2Argument2 node)
    {
        defaultCase(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        defaultCase(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        defaultCase(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        defaultCase(node);
    }

    public void caseAPrintStatement(APrintStatement node)
    {
        defaultCase(node);
    }

    public void caseACalculateStatement(ACalculateStatement node)
    {
        defaultCase(node);
    }

    public void caseACalculate2Statement(ACalculate2Statement node)
    {
        defaultCase(node);
    }

    public void caseAFcStatement(AFcStatement node)
    {
        defaultCase(node);
    }

    public void caseATrueComparison(ATrueComparison node)
    {
        defaultCase(node);
    }

    public void caseAFalseComparison(AFalseComparison node)
    {
        defaultCase(node);
    }

    public void caseALesscComparison(ALesscComparison node)
    {
        defaultCase(node);
    }

    public void caseAGreatcComparison(AGreatcComparison node)
    {
        defaultCase(node);
    }

    public void caseANoteqcComparison(ANoteqcComparison node)
    {
        defaultCase(node);
    }

    public void caseAEqcComparison(AEqcComparison node)
    {
        defaultCase(node);
    }

    public void caseAEqEvaluator(AEqEvaluator node)
    {
        defaultCase(node);
    }

    public void caseAMinusEqEvaluator(AMinusEqEvaluator node)
    {
        defaultCase(node);
    }

    public void caseADivEqEvaluator(ADivEqEvaluator node)
    {
        defaultCase(node);
    }

    public void caseAMultiplicationExpression(AMultiplicationExpression node)
    {
        defaultCase(node);
    }

    public void caseAAdditionExpression(AAdditionExpression node)
    {
        defaultCase(node);
    }

    public void caseASubtractionExpression(ASubtractionExpression node)
    {
        defaultCase(node);
    }

    public void caseASomethingMultiplication(ASomethingMultiplication node)
    {
        defaultCase(node);
    }

    public void caseAMultiplicationMultiplication(AMultiplicationMultiplication node)
    {
        defaultCase(node);
    }

    public void caseADivisionMultiplication(ADivisionMultiplication node)
    {
        defaultCase(node);
    }

    public void caseAIdSomething(AIdSomething node)
    {
        defaultCase(node);
    }

    public void caseAValSomething(AValSomething node)
    {
        defaultCase(node);
    }

    public void caseAParSomething(AParSomething node)
    {
        defaultCase(node);
    }

    public void caseABrSomething(ABrSomething node)
    {
        defaultCase(node);
    }

    public void caseATableSomething(ATableSomething node)
    {
        defaultCase(node);
    }

    public void caseAFcSomething(AFcSomething node)
    {
        defaultCase(node);
    }

    public void caseAFcFunctionCall(AFcFunctionCall node)
    {
        defaultCase(node);
    }

    public void caseAArgListArgList(AArgListArgList node)
    {
        defaultCase(node);
    }

    public void caseAComExprComExpr(AComExprComExpr node)
    {
        defaultCase(node);
    }

    public void caseAEqqEqValue(AEqqEqValue node)
    {
        defaultCase(node);
    }

    public void caseANumbValue(ANumbValue node)
    {
        defaultCase(node);
    }

    public void caseAW1Value(AW1Value node)
    {
        defaultCase(node);
    }

    public void caseAW2Value(AW2Value node)
    {
        defaultCase(node);
    }

    public void caseTTab(TTab node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTDeq(TDeq node)
    {
        defaultCase(node);
    }

    public void caseTMinusEq(TMinusEq node)
    {
        defaultCase(node);
    }

    public void caseTDivEq(TDivEq node)
    {
        defaultCase(node);
    }

    public void caseTNotEqual(TNotEqual node)
    {
        defaultCase(node);
    }

    public void caseTDef(TDef node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTLBr(TLBr node)
    {
        defaultCase(node);
    }

    public void caseTRBr(TRBr node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    public void caseTGreat(TGreat node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTQuote(TQuote node)
    {
        defaultCase(node);
    }

    public void caseTSquote(TSquote node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTLineComment(TLineComment node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseTString1(TString1 node)
    {
        defaultCase(node);
    }

    public void caseTString2(TString2 node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
