/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAGoal(AGoal node);
    void caseAPro1Program(APro1Program node);
    void caseAPro2Program(APro2Program node);
    void caseAFuncFunction(AFuncFunction node);
    void caseAArgArgument(AArgArgument node);
    void caseAArg2Argument2(AArg2Argument2 node);
    void caseAIfStatement(AIfStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAForStatement(AForStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAPrintStatement(APrintStatement node);
    void caseACalculateStatement(ACalculateStatement node);
    void caseACalculate2Statement(ACalculate2Statement node);
    void caseAFcStatement(AFcStatement node);
    void caseATrueComparison(ATrueComparison node);
    void caseAFalseComparison(AFalseComparison node);
    void caseALesscComparison(ALesscComparison node);
    void caseAGreatcComparison(AGreatcComparison node);
    void caseANoteqcComparison(ANoteqcComparison node);
    void caseAEqcComparison(AEqcComparison node);
    void caseAEqEvaluator(AEqEvaluator node);
    void caseAMinusEqEvaluator(AMinusEqEvaluator node);
    void caseADivEqEvaluator(ADivEqEvaluator node);
    void caseAMultiplicationExpression(AMultiplicationExpression node);
    void caseAAdditionExpression(AAdditionExpression node);
    void caseASubtractionExpression(ASubtractionExpression node);
    void caseASomethingMultiplication(ASomethingMultiplication node);
    void caseAMultiplicationMultiplication(AMultiplicationMultiplication node);
    void caseADivisionMultiplication(ADivisionMultiplication node);
    void caseAIdSomething(AIdSomething node);
    void caseAValSomething(AValSomething node);
    void caseAParSomething(AParSomething node);
    void caseABrSomething(ABrSomething node);
    void caseATableSomething(ATableSomething node);
    void caseAFcSomething(AFcSomething node);
    void caseAFcFunctionCall(AFcFunctionCall node);
    void caseAArgListArgList(AArgListArgList node);
    void caseAComExprComExpr(AComExprComExpr node);
    void caseAEqqEqValue(AEqqEqValue node);
    void caseANumbValue(ANumbValue node);
    void caseAW1Value(AW1Value node);
    void caseAW2Value(AW2Value node);

    void caseTTab(TTab node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTEq(TEq node);
    void caseTDeq(TDeq node);
    void caseTMinusEq(TMinusEq node);
    void caseTDivEq(TDivEq node);
    void caseTNotEqual(TNotEqual node);
    void caseTDef(TDef node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBr(TLBr node);
    void caseTRBr(TRBr node);
    void caseTIf(TIf node);
    void caseTWhile(TWhile node);
    void caseTFor(TFor node);
    void caseTPrint(TPrint node);
    void caseTReturn(TReturn node);
    void caseTComma(TComma node);
    void caseTIn(TIn node);
    void caseTLess(TLess node);
    void caseTGreat(TGreat node);
    void caseTTrue(TTrue node);
    void caseTSemi(TSemi node);
    void caseTFalse(TFalse node);
    void caseTQuote(TQuote node);
    void caseTSquote(TSquote node);
    void caseTBlank(TBlank node);
    void caseTLineComment(TLineComment node);
    void caseTNumber(TNumber node);
    void caseTIdentifier(TIdentifier node);
    void caseTString1(TString1 node);
    void caseTString2(TString2 node);
    void caseEOF(EOF node);
}
