/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPGoal().apply(this);
        outStart(node);
    }

    public void inAGoal(AGoal node)
    {
        defaultIn(node);
    }

    public void outAGoal(AGoal node)
    {
        defaultOut(node);
    }

    public void caseAGoal(AGoal node)
    {
        inAGoal(node);
        {
            Object temp[] = node.getProgram().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PProgram) temp[i]).apply(this);
            }
        }
        outAGoal(node);
    }

    public void inAPro1Program(APro1Program node)
    {
        defaultIn(node);
    }

    public void outAPro1Program(APro1Program node)
    {
        defaultOut(node);
    }

    public void caseAPro1Program(APro1Program node)
    {
        inAPro1Program(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAPro1Program(node);
    }

    public void inAPro2Program(APro2Program node)
    {
        defaultIn(node);
    }

    public void outAPro2Program(APro2Program node)
    {
        defaultOut(node);
    }

    public void caseAPro2Program(APro2Program node)
    {
        inAPro2Program(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAPro2Program(node);
    }

    public void inAFuncFunction(AFuncFunction node)
    {
        defaultIn(node);
    }

    public void outAFuncFunction(AFuncFunction node)
    {
        defaultOut(node);
    }

    public void caseAFuncFunction(AFuncFunction node)
    {
        inAFuncFunction(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDef() != null)
        {
            node.getDef().apply(this);
        }
        outAFuncFunction(node);
    }

    public void inAArgArgument(AArgArgument node)
    {
        defaultIn(node);
    }

    public void outAArgArgument(AArgArgument node)
    {
        defaultOut(node);
    }

    public void caseAArgArgument(AArgArgument node)
    {
        inAArgArgument(node);
        {
            Object temp[] = node.getArgument2().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PArgument2) temp[i]).apply(this);
            }
        }
        if(node.getEqValue() != null)
        {
            node.getEqValue().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAArgArgument(node);
    }

    public void inAArg2Argument2(AArg2Argument2 node)
    {
        defaultIn(node);
    }

    public void outAArg2Argument2(AArg2Argument2 node)
    {
        defaultOut(node);
    }

    public void caseAArg2Argument2(AArg2Argument2 node)
    {
        inAArg2Argument2(node);
        if(node.getEqValue() != null)
        {
            node.getEqValue().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAArg2Argument2(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAWhileStatement(node);
    }

    public void inAForStatement(AForStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatement(AForStatement node)
    {
        defaultOut(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        inAForStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAForStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAReturnStatement(node);
    }

    public void inAPrintStatement(APrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStatement(APrintStatement node)
    {
        defaultOut(node);
    }

    public void caseAPrintStatement(APrintStatement node)
    {
        inAPrintStatement(node);
        {
            Object temp[] = node.getComExpr().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PComExpr) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAPrintStatement(node);
    }

    public void inACalculateStatement(ACalculateStatement node)
    {
        defaultIn(node);
    }

    public void outACalculateStatement(ACalculateStatement node)
    {
        defaultOut(node);
    }

    public void caseACalculateStatement(ACalculateStatement node)
    {
        inACalculateStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getEvaluator() != null)
        {
            node.getEvaluator().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outACalculateStatement(node);
    }

    public void inACalculate2Statement(ACalculate2Statement node)
    {
        defaultIn(node);
    }

    public void outACalculate2Statement(ACalculate2Statement node)
    {
        defaultOut(node);
    }

    public void caseACalculate2Statement(ACalculate2Statement node)
    {
        inACalculate2Statement(node);
        if(node.getRightExpr() != null)
        {
            node.getRightExpr().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        if(node.getLeftExpr() != null)
        {
            node.getLeftExpr().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outACalculate2Statement(node);
    }

    public void inAFcStatement(AFcStatement node)
    {
        defaultIn(node);
    }

    public void outAFcStatement(AFcStatement node)
    {
        defaultOut(node);
    }

    public void caseAFcStatement(AFcStatement node)
    {
        inAFcStatement(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAFcStatement(node);
    }

    public void inATrueComparison(ATrueComparison node)
    {
        defaultIn(node);
    }

    public void outATrueComparison(ATrueComparison node)
    {
        defaultOut(node);
    }

    public void caseATrueComparison(ATrueComparison node)
    {
        inATrueComparison(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueComparison(node);
    }

    public void inAFalseComparison(AFalseComparison node)
    {
        defaultIn(node);
    }

    public void outAFalseComparison(AFalseComparison node)
    {
        defaultOut(node);
    }

    public void caseAFalseComparison(AFalseComparison node)
    {
        inAFalseComparison(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseComparison(node);
    }

    public void inALesscComparison(ALesscComparison node)
    {
        defaultIn(node);
    }

    public void outALesscComparison(ALesscComparison node)
    {
        defaultOut(node);
    }

    public void caseALesscComparison(ALesscComparison node)
    {
        inALesscComparison(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outALesscComparison(node);
    }

    public void inAGreatcComparison(AGreatcComparison node)
    {
        defaultIn(node);
    }

    public void outAGreatcComparison(AGreatcComparison node)
    {
        defaultOut(node);
    }

    public void caseAGreatcComparison(AGreatcComparison node)
    {
        inAGreatcComparison(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getGreat() != null)
        {
            node.getGreat().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outAGreatcComparison(node);
    }

    public void inANoteqcComparison(ANoteqcComparison node)
    {
        defaultIn(node);
    }

    public void outANoteqcComparison(ANoteqcComparison node)
    {
        defaultOut(node);
    }

    public void caseANoteqcComparison(ANoteqcComparison node)
    {
        inANoteqcComparison(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getNotEqual() != null)
        {
            node.getNotEqual().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outANoteqcComparison(node);
    }

    public void inAEqcComparison(AEqcComparison node)
    {
        defaultIn(node);
    }

    public void outAEqcComparison(AEqcComparison node)
    {
        defaultOut(node);
    }

    public void caseAEqcComparison(AEqcComparison node)
    {
        inAEqcComparison(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getDeq() != null)
        {
            node.getDeq().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outAEqcComparison(node);
    }

    public void inAEqEvaluator(AEqEvaluator node)
    {
        defaultIn(node);
    }

    public void outAEqEvaluator(AEqEvaluator node)
    {
        defaultOut(node);
    }

    public void caseAEqEvaluator(AEqEvaluator node)
    {
        inAEqEvaluator(node);
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        outAEqEvaluator(node);
    }

    public void inAMinusEqEvaluator(AMinusEqEvaluator node)
    {
        defaultIn(node);
    }

    public void outAMinusEqEvaluator(AMinusEqEvaluator node)
    {
        defaultOut(node);
    }

    public void caseAMinusEqEvaluator(AMinusEqEvaluator node)
    {
        inAMinusEqEvaluator(node);
        if(node.getMinusEq() != null)
        {
            node.getMinusEq().apply(this);
        }
        outAMinusEqEvaluator(node);
    }

    public void inADivEqEvaluator(ADivEqEvaluator node)
    {
        defaultIn(node);
    }

    public void outADivEqEvaluator(ADivEqEvaluator node)
    {
        defaultOut(node);
    }

    public void caseADivEqEvaluator(ADivEqEvaluator node)
    {
        inADivEqEvaluator(node);
        if(node.getDivEq() != null)
        {
            node.getDivEq().apply(this);
        }
        outADivEqEvaluator(node);
    }

    public void inAMultiplicationExpression(AMultiplicationExpression node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationExpression(AMultiplicationExpression node)
    {
        defaultOut(node);
    }

    public void caseAMultiplicationExpression(AMultiplicationExpression node)
    {
        inAMultiplicationExpression(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outAMultiplicationExpression(node);
    }

    public void inAAdditionExpression(AAdditionExpression node)
    {
        defaultIn(node);
    }

    public void outAAdditionExpression(AAdditionExpression node)
    {
        defaultOut(node);
    }

    public void caseAAdditionExpression(AAdditionExpression node)
    {
        inAAdditionExpression(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAdditionExpression(node);
    }

    public void inASubtractionExpression(ASubtractionExpression node)
    {
        defaultIn(node);
    }

    public void outASubtractionExpression(ASubtractionExpression node)
    {
        defaultOut(node);
    }

    public void caseASubtractionExpression(ASubtractionExpression node)
    {
        inASubtractionExpression(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASubtractionExpression(node);
    }

    public void inASomethingMultiplication(ASomethingMultiplication node)
    {
        defaultIn(node);
    }

    public void outASomethingMultiplication(ASomethingMultiplication node)
    {
        defaultOut(node);
    }

    public void caseASomethingMultiplication(ASomethingMultiplication node)
    {
        inASomethingMultiplication(node);
        if(node.getSomething() != null)
        {
            node.getSomething().apply(this);
        }
        outASomethingMultiplication(node);
    }

    public void inAMultiplicationMultiplication(AMultiplicationMultiplication node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationMultiplication(AMultiplicationMultiplication node)
    {
        defaultOut(node);
    }

    public void caseAMultiplicationMultiplication(AMultiplicationMultiplication node)
    {
        inAMultiplicationMultiplication(node);
        if(node.getSomething() != null)
        {
            node.getSomething().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outAMultiplicationMultiplication(node);
    }

    public void inADivisionMultiplication(ADivisionMultiplication node)
    {
        defaultIn(node);
    }

    public void outADivisionMultiplication(ADivisionMultiplication node)
    {
        defaultOut(node);
    }

    public void caseADivisionMultiplication(ADivisionMultiplication node)
    {
        inADivisionMultiplication(node);
        if(node.getSomething() != null)
        {
            node.getSomething().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outADivisionMultiplication(node);
    }

    public void inAIdSomething(AIdSomething node)
    {
        defaultIn(node);
    }

    public void outAIdSomething(AIdSomething node)
    {
        defaultOut(node);
    }

    public void caseAIdSomething(AIdSomething node)
    {
        inAIdSomething(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdSomething(node);
    }

    public void inAValSomething(AValSomething node)
    {
        defaultIn(node);
    }

    public void outAValSomething(AValSomething node)
    {
        defaultOut(node);
    }

    public void caseAValSomething(AValSomething node)
    {
        inAValSomething(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValSomething(node);
    }

    public void inAParSomething(AParSomething node)
    {
        defaultIn(node);
    }

    public void outAParSomething(AParSomething node)
    {
        defaultOut(node);
    }

    public void caseAParSomething(AParSomething node)
    {
        inAParSomething(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAParSomething(node);
    }

    public void inABrSomething(ABrSomething node)
    {
        defaultIn(node);
    }

    public void outABrSomething(ABrSomething node)
    {
        defaultOut(node);
    }

    public void caseABrSomething(ABrSomething node)
    {
        inABrSomething(node);
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        {
            Object temp[] = node.getComExpr().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PComExpr) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        outABrSomething(node);
    }

    public void inATableSomething(ATableSomething node)
    {
        defaultIn(node);
    }

    public void outATableSomething(ATableSomething node)
    {
        defaultOut(node);
    }

    public void caseATableSomething(ATableSomething node)
    {
        inATableSomething(node);
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outATableSomething(node);
    }

    public void inAFcSomething(AFcSomething node)
    {
        defaultIn(node);
    }

    public void outAFcSomething(AFcSomething node)
    {
        defaultOut(node);
    }

    public void caseAFcSomething(AFcSomething node)
    {
        inAFcSomething(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFcSomething(node);
    }

    public void inAFcFunctionCall(AFcFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAFcFunctionCall(AFcFunctionCall node)
    {
        defaultOut(node);
    }

    public void caseAFcFunctionCall(AFcFunctionCall node)
    {
        inAFcFunctionCall(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgList() != null)
        {
            node.getArgList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFcFunctionCall(node);
    }

    public void inAArgListArgList(AArgListArgList node)
    {
        defaultIn(node);
    }

    public void outAArgListArgList(AArgListArgList node)
    {
        defaultOut(node);
    }

    public void caseAArgListArgList(AArgListArgList node)
    {
        inAArgListArgList(node);
        {
            Object temp[] = node.getComExpr().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PComExpr) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAArgListArgList(node);
    }

    public void inAComExprComExpr(AComExprComExpr node)
    {
        defaultIn(node);
    }

    public void outAComExprComExpr(AComExprComExpr node)
    {
        defaultOut(node);
    }

    public void caseAComExprComExpr(AComExprComExpr node)
    {
        inAComExprComExpr(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAComExprComExpr(node);
    }

    public void inAEqqEqValue(AEqqEqValue node)
    {
        defaultIn(node);
    }

    public void outAEqqEqValue(AEqqEqValue node)
    {
        defaultOut(node);
    }

    public void caseAEqqEqValue(AEqqEqValue node)
    {
        inAEqqEqValue(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        outAEqqEqValue(node);
    }

    public void inANumbValue(ANumbValue node)
    {
        defaultIn(node);
    }

    public void outANumbValue(ANumbValue node)
    {
        defaultOut(node);
    }

    public void caseANumbValue(ANumbValue node)
    {
        inANumbValue(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumbValue(node);
    }

    public void inAW1Value(AW1Value node)
    {
        defaultIn(node);
    }

    public void outAW1Value(AW1Value node)
    {
        defaultOut(node);
    }

    public void caseAW1Value(AW1Value node)
    {
        inAW1Value(node);
        if(node.getString1() != null)
        {
            node.getString1().apply(this);
        }
        outAW1Value(node);
    }

    public void inAW2Value(AW2Value node)
    {
        defaultIn(node);
    }

    public void outAW2Value(AW2Value node)
    {
        defaultOut(node);
    }

    public void caseAW2Value(AW2Value node)
    {
        inAW2Value(node);
        if(node.getString2() != null)
        {
            node.getString2().apply(this);
        }
        outAW2Value(node);
    }
}
