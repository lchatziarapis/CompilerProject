/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.parser;

import minipython.lexer.*;
import minipython.node.*;
import minipython.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
	this.nodeList = listNode;

        if(!stack.hasNext())
        {
            stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return (ArrayList) ((State) stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(lexer.next());
                        push(action[1], list);
                        last_shift = action[1];
                    }
		    break;
                case REDUCE:
                    switch(action[1])
                    {

                    case 0:
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;


                    case 1:
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;


                    case 2:
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;


                    case 3:
		    {
			ArrayList list = new3();
			push(goTo(1), list);
		    }
		    break;


                    case 4:
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;


                    case 5:
		    {
			ArrayList list = new5();
			push(goTo(2), list);
		    }
		    break;


                    case 6:
		    {
			ArrayList list = new6();
			push(goTo(3), list);
		    }
		    break;


                    case 7:
		    {
			ArrayList list = new7();
			push(goTo(3), list);
		    }
		    break;


                    case 8:
		    {
			ArrayList list = new8();
			push(goTo(3), list);
		    }
		    break;


                    case 9:
		    {
			ArrayList list = new9();
			push(goTo(3), list);
		    }
		    break;


                    case 10:
		    {
			ArrayList list = new10();
			push(goTo(4), list);
		    }
		    break;


                    case 11:
		    {
			ArrayList list = new11();
			push(goTo(4), list);
		    }
		    break;


                    case 12:
		    {
			ArrayList list = new12();
			push(goTo(5), list);
		    }
		    break;


                    case 13:
		    {
			ArrayList list = new13();
			push(goTo(5), list);
		    }
		    break;


                    case 14:
		    {
			ArrayList list = new14();
			push(goTo(5), list);
		    }
		    break;


                    case 15:
		    {
			ArrayList list = new15();
			push(goTo(5), list);
		    }
		    break;


                    case 16:
		    {
			ArrayList list = new16();
			push(goTo(5), list);
		    }
		    break;


                    case 17:
		    {
			ArrayList list = new17();
			push(goTo(5), list);
		    }
		    break;


                    case 18:
		    {
			ArrayList list = new18();
			push(goTo(5), list);
		    }
		    break;


                    case 19:
		    {
			ArrayList list = new19();
			push(goTo(5), list);
		    }
		    break;


                    case 20:
		    {
			ArrayList list = new20();
			push(goTo(5), list);
		    }
		    break;


                    case 21:
		    {
			ArrayList list = new21();
			push(goTo(5), list);
		    }
		    break;


                    case 22:
		    {
			ArrayList list = new22();
			push(goTo(5), list);
		    }
		    break;


                    case 23:
		    {
			ArrayList list = new23();
			push(goTo(5), list);
		    }
		    break;


                    case 24:
		    {
			ArrayList list = new24();
			push(goTo(5), list);
		    }
		    break;


                    case 25:
		    {
			ArrayList list = new25();
			push(goTo(5), list);
		    }
		    break;


                    case 26:
		    {
			ArrayList list = new26();
			push(goTo(5), list);
		    }
		    break;


                    case 27:
		    {
			ArrayList list = new27();
			push(goTo(5), list);
		    }
		    break;


                    case 28:
		    {
			ArrayList list = new28();
			push(goTo(5), list);
		    }
		    break;


                    case 29:
		    {
			ArrayList list = new29();
			push(goTo(5), list);
		    }
		    break;


                    case 30:
		    {
			ArrayList list = new30();
			push(goTo(6), list);
		    }
		    break;


                    case 31:
		    {
			ArrayList list = new31();
			push(goTo(6), list);
		    }
		    break;


                    case 32:
		    {
			ArrayList list = new32();
			push(goTo(6), list);
		    }
		    break;


                    case 33:
		    {
			ArrayList list = new33();
			push(goTo(6), list);
		    }
		    break;


                    case 34:
		    {
			ArrayList list = new34();
			push(goTo(6), list);
		    }
		    break;


                    case 35:
		    {
			ArrayList list = new35();
			push(goTo(6), list);
		    }
		    break;


                    case 36:
		    {
			ArrayList list = new36();
			push(goTo(7), list);
		    }
		    break;


                    case 37:
		    {
			ArrayList list = new37();
			push(goTo(7), list);
		    }
		    break;


                    case 38:
		    {
			ArrayList list = new38();
			push(goTo(7), list);
		    }
		    break;


                    case 39:
		    {
			ArrayList list = new39();
			push(goTo(8), list);
		    }
		    break;


                    case 40:
		    {
			ArrayList list = new40();
			push(goTo(8), list);
		    }
		    break;


                    case 41:
		    {
			ArrayList list = new41();
			push(goTo(8), list);
		    }
		    break;


                    case 42:
		    {
			ArrayList list = new42();
			push(goTo(9), list);
		    }
		    break;


                    case 43:
		    {
			ArrayList list = new43();
			push(goTo(9), list);
		    }
		    break;


                    case 44:
		    {
			ArrayList list = new44();
			push(goTo(9), list);
		    }
		    break;


                    case 45:
		    {
			ArrayList list = new45();
			push(goTo(10), list);
		    }
		    break;


                    case 46:
		    {
			ArrayList list = new46();
			push(goTo(10), list);
		    }
		    break;


                    case 47:
		    {
			ArrayList list = new47();
			push(goTo(10), list);
		    }
		    break;


                    case 48:
		    {
			ArrayList list = new48();
			push(goTo(10), list);
		    }
		    break;


                    case 49:
		    {
			ArrayList list = new49();
			push(goTo(10), list);
		    }
		    break;


                    case 50:
		    {
			ArrayList list = new50();
			push(goTo(10), list);
		    }
		    break;


                    case 51:
		    {
			ArrayList list = new51();
			push(goTo(10), list);
		    }
		    break;


                    case 52:
		    {
			ArrayList list = new52();
			push(goTo(11), list);
		    }
		    break;


                    case 53:
		    {
			ArrayList list = new53();
			push(goTo(11), list);
		    }
		    break;


                    case 54:
		    {
			ArrayList list = new54();
			push(goTo(12), list);
		    }
		    break;


                    case 55:
		    {
			ArrayList list = new55();
			push(goTo(12), list);
		    }
		    break;


                    case 56:
		    {
			ArrayList list = new56();
			push(goTo(13), list);
		    }
		    break;


                    case 57:
		    {
			ArrayList list = new57();
			push(goTo(14), list);
		    }
		    break;


                    case 58:
		    {
			ArrayList list = new58();
			push(goTo(15), list);
		    }
		    break;


                    case 59:
		    {
			ArrayList list = new59();
			push(goTo(15), list);
		    }
		    break;


                    case 60:
		    {
			ArrayList list = new60();
			push(goTo(15), list);
		    }
		    break;


                    case 61:
		    {
			ArrayList list = new61();
			push(goTo(16), list);
		    }
		    break;


                    case 62:
		    {
			ArrayList list = new62();
			push(goTo(16), list);
		    }
		    break;


                    case 63:
		    {
			ArrayList list = new63();
			push(goTo(17), list);
		    }
		    break;


                    case 64:
		    {
			ArrayList list = new64();
			push(goTo(17), list);
		    }
		    break;


                    case 65:
		    {
			ArrayList list = new65();
			push(goTo(18), list);
		    }
		    break;


                    case 66:
		    {
			ArrayList list = new66();
			push(goTo(18), list);
		    }
		    break;


                    case 67:
		    {
			ArrayList list = new67();
			push(goTo(19), list);
		    }
		    break;


                    case 68:
		    {
			ArrayList list = new68();
			push(goTo(19), list);
		    }
		    break;

                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PGoal node1 = (PGoal) ((ArrayList)pop()).get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }



    ArrayList new0()
    {
        ArrayList nodeList = new ArrayList();

        PGoal pgoalNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        }

        pgoalNode1 = new AGoal(listNode2);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    ArrayList new1()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGoal pgoalNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pgoalNode1 = new AGoal(listNode3);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    ArrayList new2()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PProgram pprogramNode1;
        {
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pprogramNode1 = new APro1Program(pfunctionNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    ArrayList new3()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PProgram pprogramNode1;
        {
        PStatement pstatementNode2;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);

        pprogramNode1 = new APro2Program(pstatementNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    ArrayList new4()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TDef tdefNode2;
        TIdentifier tidentifierNode3;
        TLPar tlparNode4;
        Object nullNode5 = null;
        TRPar trparNode6;
        TSemi tsemiNode7;
        PStatement pstatementNode8;
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tsemiNode7 = (TSemi)nodeArrayList5.get(0);
        pstatementNode8 = (PStatement)nodeArrayList6.get(0);

        pfunctionNode1 = new AFuncFunction(tdefNode2, tidentifierNode3, tlparNode4, null, trparNode6, tsemiNode7, pstatementNode8);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new5()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TDef tdefNode2;
        TIdentifier tidentifierNode3;
        TLPar tlparNode4;
        PArgument pargumentNode5;
        TRPar trparNode6;
        TSemi tsemiNode7;
        PStatement pstatementNode8;
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pargumentNode5 = (PArgument)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tsemiNode7 = (TSemi)nodeArrayList6.get(0);
        pstatementNode8 = (PStatement)nodeArrayList7.get(0);

        pfunctionNode1 = new AFuncFunction(tdefNode2, tidentifierNode3, tlparNode4, pargumentNode5, trparNode6, tsemiNode7, pstatementNode8);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new6()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TIdentifier tidentifierNode2;
        Object nullNode3 = null;
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
        }

        pargumentNode1 = new AArgArgument(tidentifierNode2, null, listNode4);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new7()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TIdentifier tidentifierNode2;
        PEqValue peqvalueNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        peqvalueNode3 = (PEqValue)nodeArrayList2.get(0);
        {
        }

        pargumentNode1 = new AArgArgument(tidentifierNode2, peqvalueNode3, listNode4);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new8()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TIdentifier tidentifierNode2;
        Object nullNode3 = null;
        TypedLinkedList listNode5 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pargumentNode1 = new AArgArgument(tidentifierNode2, null, listNode5);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new9()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TIdentifier tidentifierNode2;
        PEqValue peqvalueNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        peqvalueNode3 = (PEqValue)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pargumentNode1 = new AArgArgument(tidentifierNode2, peqvalueNode3, listNode5);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new10()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument2 pargument2Node1;
        {
        TComma tcommaNode2;
        TIdentifier tidentifierNode3;
        Object nullNode4 = null;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pargument2Node1 = new AArg2Argument2(tcommaNode2, tidentifierNode3, null);
        }
	nodeList.add(pargument2Node1);
        return nodeList;
    }



    ArrayList new11()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument2 pargument2Node1;
        {
        TComma tcommaNode2;
        TIdentifier tidentifierNode3;
        PEqValue peqvalueNode4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        peqvalueNode4 = (PEqValue)nodeArrayList3.get(0);

        pargument2Node1 = new AArg2Argument2(tcommaNode2, tidentifierNode3, peqvalueNode4);
        }
	nodeList.add(pargument2Node1);
        return nodeList;
    }



    ArrayList new12()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TIf tifNode3;
        PComparison pcomparisonNode4;
        TSemi tsemiNode5;
        PStatement pstatementNode6;
        {
        }
        tifNode3 = (TIf)nodeArrayList1.get(0);
        pcomparisonNode4 = (PComparison)nodeArrayList2.get(0);
        tsemiNode5 = (TSemi)nodeArrayList3.get(0);
        pstatementNode6 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AIfStatement(listNode2, tifNode3, pcomparisonNode4, tsemiNode5, pstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new13()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TIf tifNode4;
        PComparison pcomparisonNode5;
        TSemi tsemiNode6;
        PStatement pstatementNode7;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tifNode4 = (TIf)nodeArrayList2.get(0);
        pcomparisonNode5 = (PComparison)nodeArrayList3.get(0);
        tsemiNode6 = (TSemi)nodeArrayList4.get(0);
        pstatementNode7 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIfStatement(listNode3, tifNode4, pcomparisonNode5, tsemiNode6, pstatementNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new14()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TWhile twhileNode3;
        PComparison pcomparisonNode4;
        TSemi tsemiNode5;
        PStatement pstatementNode6;
        {
        }
        twhileNode3 = (TWhile)nodeArrayList1.get(0);
        pcomparisonNode4 = (PComparison)nodeArrayList2.get(0);
        tsemiNode5 = (TSemi)nodeArrayList3.get(0);
        pstatementNode6 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AWhileStatement(listNode2, twhileNode3, pcomparisonNode4, tsemiNode5, pstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new15()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TWhile twhileNode4;
        PComparison pcomparisonNode5;
        TSemi tsemiNode6;
        PStatement pstatementNode7;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        twhileNode4 = (TWhile)nodeArrayList2.get(0);
        pcomparisonNode5 = (PComparison)nodeArrayList3.get(0);
        tsemiNode6 = (TSemi)nodeArrayList4.get(0);
        pstatementNode7 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatement(listNode3, twhileNode4, pcomparisonNode5, tsemiNode6, pstatementNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new16()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TFor tforNode3;
        TIdentifier tidentifierNode4;
        TIn tinNode5;
        TIdentifier tidentifierNode6;
        TSemi tsemiNode7;
        PStatement pstatementNode8;
        {
        }
        tforNode3 = (TFor)nodeArrayList1.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList2.get(0);
        tinNode5 = (TIn)nodeArrayList3.get(0);
        tidentifierNode6 = (TIdentifier)nodeArrayList4.get(0);
        tsemiNode7 = (TSemi)nodeArrayList5.get(0);
        pstatementNode8 = (PStatement)nodeArrayList6.get(0);

        pstatementNode1 = new AForStatement(listNode2, tforNode3, tidentifierNode4, tinNode5, tidentifierNode6, tsemiNode7, pstatementNode8);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new17()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TFor tforNode4;
        TIdentifier tidentifierNode5;
        TIn tinNode6;
        TIdentifier tidentifierNode7;
        TSemi tsemiNode8;
        PStatement pstatementNode9;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tforNode4 = (TFor)nodeArrayList2.get(0);
        tidentifierNode5 = (TIdentifier)nodeArrayList3.get(0);
        tinNode6 = (TIn)nodeArrayList4.get(0);
        tidentifierNode7 = (TIdentifier)nodeArrayList5.get(0);
        tsemiNode8 = (TSemi)nodeArrayList6.get(0);
        pstatementNode9 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AForStatement(listNode3, tforNode4, tidentifierNode5, tinNode6, tidentifierNode7, tsemiNode8, pstatementNode9);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new18()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TReturn treturnNode3;
        PExpression pexpressionNode4;
        {
        }
        treturnNode3 = (TReturn)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AReturnStatement(listNode2, treturnNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new19()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TReturn treturnNode4;
        PExpression pexpressionNode5;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        treturnNode4 = (TReturn)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AReturnStatement(listNode3, treturnNode4, pexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new20()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TPrint tprintNode3;
        PExpression pexpressionNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        {
        }
        tprintNode3 = (TPrint)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);
        {
        }

        pstatementNode1 = new APrintStatement(listNode2, tprintNode3, pexpressionNode4, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new21()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TPrint tprintNode4;
        PExpression pexpressionNode5;
        TypedLinkedList listNode6 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tprintNode4 = (TPrint)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        {
        }

        pstatementNode1 = new APrintStatement(listNode3, tprintNode4, pexpressionNode5, listNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new22()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TPrint tprintNode3;
        PExpression pexpressionNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        {
        }
        tprintNode3 = (TPrint)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstatementNode1 = new APrintStatement(listNode2, tprintNode3, pexpressionNode4, listNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new23()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TPrint tprintNode4;
        PExpression pexpressionNode5;
        TypedLinkedList listNode7 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tprintNode4 = (TPrint)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pstatementNode1 = new APrintStatement(listNode3, tprintNode4, pexpressionNode5, listNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new24()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TIdentifier tidentifierNode3;
        PEvaluator pevaluatorNode4;
        PExpression pexpressionNode5;
        {
        }
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        pevaluatorNode4 = (PEvaluator)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new ACalculateStatement(listNode2, tidentifierNode3, pevaluatorNode4, pexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new25()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TIdentifier tidentifierNode4;
        PEvaluator pevaluatorNode5;
        PExpression pexpressionNode6;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tidentifierNode4 = (TIdentifier)nodeArrayList2.get(0);
        pevaluatorNode5 = (PEvaluator)nodeArrayList3.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new ACalculateStatement(listNode3, tidentifierNode4, pevaluatorNode5, pexpressionNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new26()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TIdentifier tidentifierNode3;
        TLBr tlbrNode4;
        PExpression pexpressionNode5;
        TRBr trbrNode6;
        TEq teqNode7;
        PExpression pexpressionNode8;
        {
        }
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        tlbrNode4 = (TLBr)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        trbrNode6 = (TRBr)nodeArrayList4.get(0);
        teqNode7 = (TEq)nodeArrayList5.get(0);
        pexpressionNode8 = (PExpression)nodeArrayList6.get(0);

        pstatementNode1 = new ACalculate2Statement(listNode2, tidentifierNode3, tlbrNode4, pexpressionNode5, trbrNode6, teqNode7, pexpressionNode8);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new27()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TIdentifier tidentifierNode4;
        TLBr tlbrNode5;
        PExpression pexpressionNode6;
        TRBr trbrNode7;
        TEq teqNode8;
        PExpression pexpressionNode9;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tidentifierNode4 = (TIdentifier)nodeArrayList2.get(0);
        tlbrNode5 = (TLBr)nodeArrayList3.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList4.get(0);
        trbrNode7 = (TRBr)nodeArrayList5.get(0);
        teqNode8 = (TEq)nodeArrayList6.get(0);
        pexpressionNode9 = (PExpression)nodeArrayList7.get(0);

        pstatementNode1 = new ACalculate2Statement(listNode3, tidentifierNode4, tlbrNode5, pexpressionNode6, trbrNode7, teqNode8, pexpressionNode9);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new28()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        PFunctionCall pfunctioncallNode3;
        {
        }
        pfunctioncallNode3 = (PFunctionCall)nodeArrayList1.get(0);

        pstatementNode1 = new AFcStatement(listNode2, pfunctioncallNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new29()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        PFunctionCall pfunctioncallNode4;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pfunctioncallNode4 = (PFunctionCall)nodeArrayList2.get(0);

        pstatementNode1 = new AFcStatement(listNode3, pfunctioncallNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new30()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pcomparisonNode1 = new ATrueComparison(ttrueNode2);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new31()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pcomparisonNode1 = new AFalseComparison(tfalseNode2);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new32()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PExpression pexpressionNode2;
        TLess tlessNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tlessNode3 = (TLess)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pcomparisonNode1 = new ALesscComparison(pexpressionNode2, tlessNode3, pexpressionNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new33()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PExpression pexpressionNode2;
        TGreat tgreatNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tgreatNode3 = (TGreat)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pcomparisonNode1 = new AGreatcComparison(pexpressionNode2, tgreatNode3, pexpressionNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new34()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PExpression pexpressionNode2;
        TNotEqual tnotequalNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tnotequalNode3 = (TNotEqual)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pcomparisonNode1 = new ANoteqcComparison(pexpressionNode2, tnotequalNode3, pexpressionNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new35()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PExpression pexpressionNode2;
        TDeq tdeqNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tdeqNode3 = (TDeq)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pcomparisonNode1 = new AEqcComparison(pexpressionNode2, tdeqNode3, pexpressionNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new36()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PEvaluator pevaluatorNode1;
        {
        TEq teqNode2;
        teqNode2 = (TEq)nodeArrayList1.get(0);

        pevaluatorNode1 = new AEqEvaluator(teqNode2);
        }
	nodeList.add(pevaluatorNode1);
        return nodeList;
    }



    ArrayList new37()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PEvaluator pevaluatorNode1;
        {
        TMinusEq tminuseqNode2;
        tminuseqNode2 = (TMinusEq)nodeArrayList1.get(0);

        pevaluatorNode1 = new AMinusEqEvaluator(tminuseqNode2);
        }
	nodeList.add(pevaluatorNode1);
        return nodeList;
    }



    ArrayList new38()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PEvaluator pevaluatorNode1;
        {
        TDivEq tdiveqNode2;
        tdiveqNode2 = (TDivEq)nodeArrayList1.get(0);

        pevaluatorNode1 = new ADivEqEvaluator(tdiveqNode2);
        }
	nodeList.add(pevaluatorNode1);
        return nodeList;
    }



    ArrayList new39()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PMultiplication pmultiplicationNode2;
        pmultiplicationNode2 = (PMultiplication)nodeArrayList1.get(0);

        pexpressionNode1 = new AMultiplicationExpression(pmultiplicationNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new40()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        TPlus tplusNode3;
        PMultiplication pmultiplicationNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pmultiplicationNode4 = (PMultiplication)nodeArrayList3.get(0);

        pexpressionNode1 = new AAdditionExpression(pexpressionNode2, tplusNode3, pmultiplicationNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new41()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        TMinus tminusNode3;
        PMultiplication pmultiplicationNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pmultiplicationNode4 = (PMultiplication)nodeArrayList3.get(0);

        pexpressionNode1 = new ASubtractionExpression(pexpressionNode2, tminusNode3, pmultiplicationNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new42()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMultiplication pmultiplicationNode1;
        {
        PSomething psomethingNode2;
        psomethingNode2 = (PSomething)nodeArrayList1.get(0);

        pmultiplicationNode1 = new ASomethingMultiplication(psomethingNode2);
        }
	nodeList.add(pmultiplicationNode1);
        return nodeList;
    }



    ArrayList new43()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMultiplication pmultiplicationNode1;
        {
        PMultiplication pmultiplicationNode2;
        TMult tmultNode3;
        PSomething psomethingNode4;
        pmultiplicationNode2 = (PMultiplication)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        psomethingNode4 = (PSomething)nodeArrayList3.get(0);

        pmultiplicationNode1 = new AMultiplicationMultiplication(pmultiplicationNode2, tmultNode3, psomethingNode4);
        }
	nodeList.add(pmultiplicationNode1);
        return nodeList;
    }



    ArrayList new44()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMultiplication pmultiplicationNode1;
        {
        PMultiplication pmultiplicationNode2;
        TDiv tdivNode3;
        PSomething psomethingNode4;
        pmultiplicationNode2 = (PMultiplication)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        psomethingNode4 = (PSomething)nodeArrayList3.get(0);

        pmultiplicationNode1 = new ADivisionMultiplication(pmultiplicationNode2, tdivNode3, psomethingNode4);
        }
	nodeList.add(pmultiplicationNode1);
        return nodeList;
    }



    ArrayList new45()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSomething psomethingNode1;
        {
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        psomethingNode1 = new AIdSomething(tidentifierNode2);
        }
	nodeList.add(psomethingNode1);
        return nodeList;
    }



    ArrayList new46()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSomething psomethingNode1;
        {
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        psomethingNode1 = new AValSomething(pvalueNode2);
        }
	nodeList.add(psomethingNode1);
        return nodeList;
    }



    ArrayList new47()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSomething psomethingNode1;
        {
        TLPar tlparNode2;
        PExpression pexpressionNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        psomethingNode1 = new AParSomething(tlparNode2, pexpressionNode3, trparNode4);
        }
	nodeList.add(psomethingNode1);
        return nodeList;
    }



    ArrayList new48()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSomething psomethingNode1;
        {
        TLBr tlbrNode2;
        PExpression pexpressionNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TRBr trbrNode5;
        tlbrNode2 = (TLBr)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        {
        }
        trbrNode5 = (TRBr)nodeArrayList3.get(0);

        psomethingNode1 = new ABrSomething(tlbrNode2, pexpressionNode3, listNode4, trbrNode5);
        }
	nodeList.add(psomethingNode1);
        return nodeList;
    }



    ArrayList new49()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSomething psomethingNode1;
        {
        TLBr tlbrNode2;
        PExpression pexpressionNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TRBr trbrNode6;
        tlbrNode2 = (TLBr)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trbrNode6 = (TRBr)nodeArrayList4.get(0);

        psomethingNode1 = new ABrSomething(tlbrNode2, pexpressionNode3, listNode5, trbrNode6);
        }
	nodeList.add(psomethingNode1);
        return nodeList;
    }



    ArrayList new50()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSomething psomethingNode1;
        {
        TIdentifier tidentifierNode2;
        TLBr tlbrNode3;
        PExpression pexpressionNode4;
        TRBr trbrNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlbrNode3 = (TLBr)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trbrNode5 = (TRBr)nodeArrayList4.get(0);

        psomethingNode1 = new ATableSomething(tidentifierNode2, tlbrNode3, pexpressionNode4, trbrNode5);
        }
	nodeList.add(psomethingNode1);
        return nodeList;
    }



    ArrayList new51()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSomething psomethingNode1;
        {
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        psomethingNode1 = new AFcSomething(pfunctioncallNode2);
        }
	nodeList.add(psomethingNode1);
        return nodeList;
    }



    ArrayList new52()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        TIdentifier tidentifierNode2;
        TLPar tlparNode3;
        Object nullNode4 = null;
        TRPar trparNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        pfunctioncallNode1 = new AFcFunctionCall(tidentifierNode2, tlparNode3, null, trparNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new53()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        TIdentifier tidentifierNode2;
        TLPar tlparNode3;
        PArgList parglistNode4;
        TRPar trparNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        parglistNode4 = (PArgList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfunctioncallNode1 = new AFcFunctionCall(tidentifierNode2, tlparNode3, parglistNode4, trparNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new54()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgList parglistNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
        }

        parglistNode1 = new AArgListArgList(pexpressionNode2, listNode3);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new55()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgList parglistNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        parglistNode1 = new AArgListArgList(pexpressionNode2, listNode4);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new56()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComExpr pcomexprNode1;
        {
        TComma tcommaNode2;
        PExpression pexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pcomexprNode1 = new AComExprComExpr(tcommaNode2, pexpressionNode3);
        }
	nodeList.add(pcomexprNode1);
        return nodeList;
    }



    ArrayList new57()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PEqValue peqvalueNode1;
        {
        TEq teqNode2;
        PValue pvalueNode3;
        teqNode2 = (TEq)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);

        peqvalueNode1 = new AEqqEqValue(teqNode2, pvalueNode3);
        }
	nodeList.add(peqvalueNode1);
        return nodeList;
    }



    ArrayList new58()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pvalueNode1 = new ANumbValue(tnumberNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new59()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TString1 tstring1Node2;
        tstring1Node2 = (TString1)nodeArrayList1.get(0);

        pvalueNode1 = new AW1Value(tstring1Node2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new60()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TString2 tstring2Node2;
        tstring2Node2 = (TString2)nodeArrayList1.get(0);

        pvalueNode1 = new AW2Value(tstring2Node2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new61()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PProgram pprogramNode1;
        pprogramNode1 = (PProgram)nodeArrayList1.get(0);
	if(pprogramNode1 != null)
	{
	  listNode2.add(pprogramNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new62()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PProgram pprogramNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pprogramNode2 = (PProgram)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pprogramNode2 != null)
	{
	  listNode3.add(pprogramNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new63()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PArgument2 pargument2Node1;
        pargument2Node1 = (PArgument2)nodeArrayList1.get(0);
	if(pargument2Node1 != null)
	{
	  listNode2.add(pargument2Node1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new64()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PArgument2 pargument2Node2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pargument2Node2 = (PArgument2)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pargument2Node2 != null)
	{
	  listNode3.add(pargument2Node2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new65()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        TTab ttabNode1;
        ttabNode1 = (TTab)nodeArrayList1.get(0);
	if(ttabNode1 != null)
	{
	  listNode2.add(ttabNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new66()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        TTab ttabNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        ttabNode2 = (TTab)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ttabNode2 != null)
	{
	  listNode3.add(ttabNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new67()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PComExpr pcomexprNode1;
        pcomexprNode1 = (PComExpr)nodeArrayList1.get(0);
	if(pcomexprNode1 != null)
	{
	  listNode2.add(pcomexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new68()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PComExpr pcomexprNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pcomexprNode2 = (PComExpr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomexprNode2 != null)
	{
	  listNode3.add(pcomexprNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {10, SHIFT, 2}, {15, SHIFT, 3}, {16, SHIFT, 4}, {17, SHIFT, 5}, {18, SHIFT, 6}, {19, SHIFT, 7}, {30, SHIFT, 8}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 2}, {30, SHIFT, 16}, },
			{{-1, ERROR, 3}, {11, SHIFT, 17}, {13, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 4}, {11, SHIFT, 17}, {13, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 5}, {30, SHIFT, 32}, },
			{{-1, ERROR, 6}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 7}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 8}, {5, SHIFT, 35}, {7, SHIFT, 36}, {8, SHIFT, 37}, {11, SHIFT, 38}, {13, SHIFT, 39}, },
			{{-1, ERROR, 9}, {33, ACCEPT, -1}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {10, SHIFT, 2}, {15, SHIFT, 3}, {16, SHIFT, 4}, {17, SHIFT, 5}, {18, SHIFT, 6}, {19, SHIFT, 7}, {30, SHIFT, 8}, },
			{{-1, ERROR, 15}, {0, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {18, SHIFT, 46}, {19, SHIFT, 47}, {30, SHIFT, 48}, },
			{{-1, ERROR, 16}, {11, SHIFT, 50}, },
			{{-1, ERROR, 17}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 18}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 45}, {11, SHIFT, 38}, {13, SHIFT, 53}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 25}, {25, SHIFT, 54}, },
			{{-1, ERROR, 26}, {1, SHIFT, 55}, {2, SHIFT, 56}, {6, SHIFT, 57}, {9, SHIFT, 58}, {22, SHIFT, 59}, {23, SHIFT, 60}, },
			{{-1, REDUCE, 39}, {3, SHIFT, 61}, {4, SHIFT, 62}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 31}, {25, SHIFT, 63}, },
			{{-1, ERROR, 32}, {21, SHIFT, 64}, },
			{{-1, REDUCE, 20}, {1, SHIFT, 55}, {2, SHIFT, 56}, {20, SHIFT, 65}, },
			{{-1, REDUCE, 18}, {1, SHIFT, 55}, {2, SHIFT, 56}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 38}, {11, SHIFT, 17}, {12, SHIFT, 68}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 39}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 40}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 43}, {11, SHIFT, 17}, {13, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 44}, {11, SHIFT, 17}, {13, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 45}, {30, SHIFT, 75}, },
			{{-1, ERROR, 46}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 47}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 48}, {5, SHIFT, 35}, {7, SHIFT, 36}, {8, SHIFT, 37}, {11, SHIFT, 38}, {13, SHIFT, 78}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 50}, {12, SHIFT, 80}, {30, SHIFT, 81}, },
			{{-1, ERROR, 51}, {1, SHIFT, 55}, {2, SHIFT, 56}, {12, SHIFT, 83}, },
			{{-1, ERROR, 52}, {1, SHIFT, 55}, {2, SHIFT, 56}, {14, SHIFT, 84}, {20, SHIFT, 65}, },
			{{-1, ERROR, 53}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 54}, {0, SHIFT, 1}, {15, SHIFT, 3}, {16, SHIFT, 4}, {17, SHIFT, 5}, {18, SHIFT, 6}, {19, SHIFT, 7}, {30, SHIFT, 8}, },
			{{-1, ERROR, 55}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 56}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 57}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 58}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 59}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 60}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 61}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 62}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 63}, {0, SHIFT, 1}, {15, SHIFT, 3}, {16, SHIFT, 4}, {17, SHIFT, 5}, {18, SHIFT, 6}, {19, SHIFT, 7}, {30, SHIFT, 8}, },
			{{-1, ERROR, 64}, {30, SHIFT, 97}, },
			{{-1, ERROR, 65}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 22}, {20, SHIFT, 65}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {20, SHIFT, 65}, },
			{{-1, ERROR, 70}, {12, SHIFT, 101}, },
			{{-1, ERROR, 71}, {1, SHIFT, 55}, {2, SHIFT, 56}, {14, SHIFT, 102}, },
			{{-1, REDUCE, 24}, {1, SHIFT, 55}, {2, SHIFT, 56}, },
			{{-1, ERROR, 73}, {25, SHIFT, 103}, },
			{{-1, ERROR, 74}, {25, SHIFT, 104}, },
			{{-1, ERROR, 75}, {21, SHIFT, 105}, },
			{{-1, REDUCE, 21}, {1, SHIFT, 55}, {2, SHIFT, 56}, {20, SHIFT, 65}, },
			{{-1, REDUCE, 19}, {1, SHIFT, 55}, {2, SHIFT, 56}, },
			{{-1, ERROR, 78}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 79}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 80}, {25, SHIFT, 109}, },
			{{-1, REDUCE, 6}, {5, SHIFT, 110}, {20, SHIFT, 111}, },
			{{-1, ERROR, 82}, {12, SHIFT, 115}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 85}, {14, SHIFT, 116}, {20, SHIFT, 65}, },
			{{-1, ERROR, 86}, {1, SHIFT, 55}, {2, SHIFT, 56}, {14, SHIFT, 117}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 40}, {3, SHIFT, 61}, {4, SHIFT, 62}, },
			{{-1, REDUCE, 41}, {3, SHIFT, 61}, {4, SHIFT, 62}, },
			{{-1, REDUCE, 35}, {1, SHIFT, 55}, {2, SHIFT, 56}, },
			{{-1, REDUCE, 34}, {1, SHIFT, 55}, {2, SHIFT, 56}, },
			{{-1, REDUCE, 32}, {1, SHIFT, 55}, {2, SHIFT, 56}, },
			{{-1, REDUCE, 33}, {1, SHIFT, 55}, {2, SHIFT, 56}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 97}, {25, SHIFT, 118}, },
			{{-1, REDUCE, 56}, {1, SHIFT, 55}, {2, SHIFT, 56}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 55}, {20, SHIFT, 65}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 102}, {5, SHIFT, 119}, },
			{{-1, ERROR, 103}, {0, SHIFT, 1}, {15, SHIFT, 3}, {16, SHIFT, 4}, {17, SHIFT, 5}, {18, SHIFT, 6}, {19, SHIFT, 7}, {30, SHIFT, 8}, },
			{{-1, ERROR, 104}, {0, SHIFT, 1}, {15, SHIFT, 3}, {16, SHIFT, 4}, {17, SHIFT, 5}, {18, SHIFT, 6}, {19, SHIFT, 7}, {30, SHIFT, 8}, },
			{{-1, ERROR, 105}, {30, SHIFT, 122}, },
			{{-1, REDUCE, 23}, {20, SHIFT, 65}, },
			{{-1, ERROR, 107}, {1, SHIFT, 55}, {2, SHIFT, 56}, {14, SHIFT, 123}, },
			{{-1, REDUCE, 25}, {1, SHIFT, 55}, {2, SHIFT, 56}, },
			{{-1, ERROR, 109}, {0, SHIFT, 1}, {15, SHIFT, 3}, {16, SHIFT, 4}, {17, SHIFT, 5}, {18, SHIFT, 6}, {19, SHIFT, 7}, {30, SHIFT, 8}, },
			{{-1, ERROR, 110}, {29, SHIFT, 21}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 111}, {30, SHIFT, 126}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 7}, {20, SHIFT, 111}, },
			{{-1, REDUCE, 8}, {20, SHIFT, 111}, },
			{{-1, ERROR, 115}, {25, SHIFT, 129}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 118}, {0, SHIFT, 1}, {15, SHIFT, 3}, {16, SHIFT, 4}, {17, SHIFT, 5}, {18, SHIFT, 6}, {19, SHIFT, 7}, {30, SHIFT, 8}, },
			{{-1, ERROR, 119}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 122}, {25, SHIFT, 132}, },
			{{-1, ERROR, 123}, {5, SHIFT, 133}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 10}, {5, SHIFT, 110}, },
			{{-1, REDUCE, 9}, {20, SHIFT, 111}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 129}, {0, SHIFT, 1}, {15, SHIFT, 3}, {16, SHIFT, 4}, {17, SHIFT, 5}, {18, SHIFT, 6}, {19, SHIFT, 7}, {30, SHIFT, 8}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 26}, {1, SHIFT, 55}, {2, SHIFT, 56}, },
			{{-1, ERROR, 132}, {0, SHIFT, 1}, {15, SHIFT, 3}, {16, SHIFT, 4}, {17, SHIFT, 5}, {18, SHIFT, 6}, {19, SHIFT, 7}, {30, SHIFT, 8}, },
			{{-1, ERROR, 133}, {11, SHIFT, 17}, {13, SHIFT, 18}, {29, SHIFT, 21}, {30, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 27}, {1, SHIFT, 55}, {2, SHIFT, 56}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 9}, },
			{{-1, 10}, {14, 41}, },
			{{-1, 11}, },
			{{-1, 82}, },
			{{-1, 112}, {114, 128}, {127, 128}, },
			{{-1, 12}, {54, 87}, {63, 96}, {103, 120}, {104, 121}, {109, 124}, {118, 130}, {129, 135}, {132, 136}, },
			{{-1, 25}, {4, 31}, {43, 73}, {44, 74}, },
			{{-1, 40}, {48, 79}, },
			{{-1, 26}, {6, 33}, {7, 34}, {17, 51}, {18, 52}, {38, 69}, {39, 71}, {40, 72}, {46, 76}, {47, 77}, {53, 86}, {57, 90}, {58, 91}, {59, 92}, {60, 93}, {65, 98}, {78, 107}, {79, 108}, {119, 131}, {133, 137}, },
			{{-1, 27}, {55, 88}, {56, 89}, },
			{{-1, 28}, {61, 94}, {62, 95}, },
			{{-1, 29}, {0, 13}, {14, 13}, {15, 49}, {54, 13}, {63, 13}, {103, 13}, {104, 13}, {109, 13}, {118, 13}, {129, 13}, {132, 13}, },
			{{-1, 70}, },
			{{-1, 66}, {67, 99}, {85, 99}, {100, 99}, {106, 99}, },
			{{-1, 113}, {126, 134}, },
			{{-1, 30}, {110, 125}, },
			{{-1, 14}, },
			{{-1, 114}, {113, 127}, },
			{{-1, 15}, },
			{{-1, 67}, {52, 85}, {69, 100}, {76, 106}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: tab, 'def', 'if', 'while', 'for', 'print', 'return', identifier, EOF",
			"expecting: tab, 'if', 'while', 'for', 'print', 'return', identifier",
			"expecting: identifier",
			"expecting: '(', '[', 'true', 'false', number, identifier, string1, string2",
			"expecting: '(', '[', number, identifier, string1, string2",
			"expecting: '=', '-=', '/=', '(', '['",
			"expecting: EOF",
			"expecting: '('",
			"expecting: ':'",
			"expecting: tab, '+', '-', '*', '/', '==', '!=', 'def', ')', ']', 'if', 'while', 'for', 'print', 'return', ',', '<', '>', ':', identifier, EOF",
			"expecting: tab, '+', '-', '*', '/', '==', '!=', 'def', '(', ')', '[', ']', 'if', 'while', 'for', 'print', 'return', ',', '<', '>', ':', identifier, EOF",
			"expecting: '+', '-', '==', '!=', '<', '>'",
			"expecting: 'in'",
			"expecting: tab, '+', '-', 'def', 'if', 'while', 'for', 'print', 'return', ',', identifier, EOF",
			"expecting: tab, '+', '-', 'def', 'if', 'while', 'for', 'print', 'return', identifier, EOF",
			"expecting: '(', ')', '[', number, identifier, string1, string2",
			"expecting: ')', identifier",
			"expecting: '+', '-', ')'",
			"expecting: '+', '-', ']', ','",
			"expecting: tab, 'def', ')', ']', 'if', 'while', 'for', 'print', 'return', ',', identifier, EOF",
			"expecting: tab, 'def', 'if', 'while', 'for', 'print', 'return', ',', identifier, EOF",
			"expecting: '+', '-', ')', ','",
			"expecting: ')'",
			"expecting: '+', '-', ']'",
			"expecting: '=', ')', ','",
			"expecting: ']', ','",
			"expecting: '+', '-', ':'",
			"expecting: tab, '+', '-', 'def', ')', ']', 'if', 'while', 'for', 'print', 'return', ',', identifier, EOF",
			"expecting: ')', ','",
			"expecting: '='",
			"expecting: number, string1, string2",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 2, 4, 4, 5, 6, 0, 0, 0, 0, 0, 1, 7, 4, 4, 8, 8, 9, 10, 9, 9, 8, 11, 9, 9, 9, 9, 8, 12, 13, 14, 4, 4, 4, 15, 4, 4, 0, 1, 3, 3, 2, 4, 4, 5, 0, 16, 17, 18, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 1, 2, 4, 19, 20, 9, 21, 22, 23, 14, 8, 8, 12, 13, 14, 4, 4, 8, 24, 22, 9, 9, 25, 23, 0, 9, 9, 26, 26, 26, 26, 9, 9, 0, 8, 27, 19, 28, 9, 29, 1, 1, 2, 20, 23, 14, 1, 30, 2, 28, 28, 28, 8, 9, 9, 1, 4, 0, 0, 8, 29, 0, 28, 24, 28, 28, 1, 0, 14, 1, 4, 28, 0, 0, 14, 
        };*/
}
