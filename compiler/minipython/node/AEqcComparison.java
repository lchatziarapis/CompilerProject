/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AEqcComparison extends PComparison
{
    private PExpression _lpar_;
    private TDeq _deq_;
    private PExpression _rpar_;

    public AEqcComparison()
    {
    }

    public AEqcComparison(
        PExpression _lpar_,
        TDeq _deq_,
        PExpression _rpar_)
    {
        setLpar(_lpar_);

        setDeq(_deq_);

        setRpar(_rpar_);

    }
    public Object clone()
    {
        return new AEqcComparison(
            (PExpression) cloneNode(_lpar_),
            (TDeq) cloneNode(_deq_),
            (PExpression) cloneNode(_rpar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEqcComparison(this);
    }

    public PExpression getLpar()
    {
        return _lpar_;
    }

    public void setLpar(PExpression node)
    {
        if(_lpar_ != null)
        {
            _lpar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lpar_ = node;
    }

    public TDeq getDeq()
    {
        return _deq_;
    }

    public void setDeq(TDeq node)
    {
        if(_deq_ != null)
        {
            _deq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _deq_ = node;
    }

    public PExpression getRpar()
    {
        return _rpar_;
    }

    public void setRpar(PExpression node)
    {
        if(_rpar_ != null)
        {
            _rpar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rpar_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lpar_)
            + toString(_deq_)
            + toString(_rpar_);
    }

    void removeChild(Node child)
    {
        if(_lpar_ == child)
        {
            _lpar_ = null;
            return;
        }

        if(_deq_ == child)
        {
            _deq_ = null;
            return;
        }

        if(_rpar_ == child)
        {
            _rpar_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lpar_ == oldChild)
        {
            setLpar((PExpression) newChild);
            return;
        }

        if(_deq_ == oldChild)
        {
            setDeq((TDeq) newChild);
            return;
        }

        if(_rpar_ == oldChild)
        {
            setRpar((PExpression) newChild);
            return;
        }

    }
}
